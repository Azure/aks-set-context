"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAzureAccessToken = void 0;
const core = require("@actions/core");
const querystring = require("querystring");
const http_1 = require("@azure-actions/utilities/lib/http");
const utilities_1 = require("@azure-actions/utilities");
function getAzureAccessToken(creds) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!!creds) {
            return getTokenUsingCredObject(creds);
        }
        else {
            try {
                let token = getTokenUsingAzCLI();
                return Promise.resolve(token);
            }
            catch (ex) {
                return Promise.reject(ex);
            }
        }
    });
}
exports.getAzureAccessToken = getAzureAccessToken;
function getTokenUsingCredObject(creds) {
    return __awaiter(this, void 0, void 0, function* () {
        let credsObject;
        try {
            credsObject = JSON.parse(creds);
        }
        catch (ex) {
            throw new Error('Credentials object is not a valid JSON');
        }
        let servicePrincipalId = credsObject["clientId"];
        let servicePrincipalKey = credsObject["clientSecret"];
        let tenantId = credsObject["tenantId"];
        let authorityUrl = credsObject["activeDirectoryEndpointUrl"] || "https://login.microsoftonline.com";
        let managementEndpointUrl = credsObject["resourceManagerEndpointUrl"] || "https://management.azure.com/";
        if (!servicePrincipalId || !servicePrincipalKey || !tenantId || !authorityUrl) {
            throw new Error("Not all values are present in the creds object. Ensure clientId, clientSecret, tenantId and activeDirectoryEndpointUrl are supplied in the provided object");
        }
        return new Promise((resolve, reject) => {
            let webRequest = new http_1.WebRequest();
            webRequest.method = "POST";
            webRequest.uri = `${authorityUrl}/${tenantId}/oauth2/token/`;
            webRequest.body = querystring.stringify({
                resource: managementEndpointUrl,
                client_id: servicePrincipalId,
                grant_type: "client_credentials",
                client_secret: servicePrincipalKey
            });
            webRequest.headers = {
                "Content-Type": "application/x-www-form-urlencoded; charset=utf-8"
            };
            let webRequestOptions = {
                retriableStatusCodes: [400, 408, 409, 500, 502, 503, 504],
            };
            http_1.sendRequest(webRequest, webRequestOptions).then((response) => {
                if (response.statusCode == 200) {
                    resolve(response.body.access_token);
                }
                else if ([400, 401, 403].indexOf(response.statusCode) != -1) {
                    reject('ExpiredServicePrincipal');
                }
                else {
                    reject('CouldNotFetchAccessTokenforAzureStatusCode');
                }
            }, (error) => {
                reject(error);
            });
        });
    });
}
function getTokenUsingAzCLI() {
    let resultOfExec = utilities_1.execSync("az", "account get-access-token --query \"accessToken\"", { silent: true });
    if (resultOfExec.code != 0) {
        core.error(`Login with azure/login action to fetch token. Error Code: ${resultOfExec.code}`);
        throw resultOfExec;
    }
    let token = resultOfExec.stdout.trim();
    return token.substring(1, token.length - 1); // The result of the above is enclosed in quotes, ex: '"accessToken"'. Trimming the enclosed quotes to extract the token. Alternative could be JSON.parse
}
